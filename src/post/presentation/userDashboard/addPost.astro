---
import { Categories } from "astro:db";
import Button from "../../../ui/button.astro";
import { type ICategories } from "../../domain/entities/postEntities";

const { category } = Astro.props as ICategories;
---
<div class="w-full h-full absolute top-0 left-0 hidden" id="modal">

    <div class="absolute w-full h-full bg-black bg-opacity-25 flex justify-center items-center close-modal"></div>

    <div class="w-full h-full flex justify-center items-center">
        <div class="bg-white w-1/5 rounded-lg p-5 flex flex-col items-center z-50 absolute">
            <div class="border-b w-full pb-3 flex justify-between items-center">
                <h2 class="text-xl">Formulaire d'ajout de code</h2>
                <svg 
                    class="text-xl border rounded-full hover:bg-gray-50 cursor-pointer close-modal"
                    xmlns="http://www.w3.org/2000/svg" 
                    width="1em" 
                    height="1em" 
                    viewBox="0 0 24 24">
                    <path 
                    fill="currentColor" 
                    d="m6.4 18.308l-.708-.708l5.6-5.6l-5.6-5.6l.708-.708l5.6 5.6l5.6-5.6l.708.708l-5.6 5.6l5.6 5.6l-.708.708l-5.6-5.6z"
                    />
                </svg>
            </div>
            <form id="add-form" class="flex flex-col w-full gap-5 mt-10">
                <label for="categories" class="sr-only">Categories</label>
                <select class="border pl-2 rounded-md py-2" name="categories" id="category-input">
                    {category.filter(cat => cat.name !== "Tous").map(cat => (
                        <option id={cat.id} value={cat.name}>{cat.name}</option>
                    ))}
                </select>
                <label for="code" class="sr-only">Code</label>
                <input 
                    class="border pl-2 rounded-md py-2" 
                    type="text" 
                    name="content" 
                    placeholder="Entrer votre code de parrainage" 
                    id="content-input">
                <Button text="Ajouter" typeBtn="submit"></Button>
            </form>
        </div>
    </div>
</div>

<div class="flex justify-end">
    <Button text="Ajouter un code" id="open-modal"></Button>
</div>


<script>

    const modal = document.querySelector('#modal');
    const openModal = document.querySelector('#open-modal');
    const closeModal = document.querySelectorAll('.close-modal');

    const handleToogleModal = (element: any) => {
        if(element.classList.contains('hidden')){
            element.classList.remove('hidden');
        } else {
            element.classList.add('hidden');
        }
    }

    openModal?.addEventListener('click', () => handleToogleModal(modal));
    closeModal.forEach(el => {
        el.addEventListener('click', () => handleToogleModal(modal));
    })

    const addForm: HTMLFormElement | null = document.querySelector("#add-form");

    addForm?.addEventListener('submit', async (e) => {
        e.preventDefault();
        try {
            const contentInput: HTMLInputElement | null= document.querySelector('#content-input');
            const content = contentInput ? contentInput.value : ''

            const categoryInput: HTMLInputElement | null= document.querySelector('#category-input');
            const category = categoryInput ? categoryInput.value : ''
            console.log(content)
            if(typeof content === "string" && content !== "") {
                const req = await fetch('api/contentManagement/controller/createPost', {
                    method: 'POST', 
                    headers: {
                        Accept: 'application/json',
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ content, category })
                });
                
                const { success, data, message } = await req.json();

                if(success) {
                    addForm.reset();
                    handleToogleModal(modal);
                    alert(message)
                } else {
                    throw new Error(message)
                }
            }

        } catch (error) {
            if(error instanceof Error) {
                alert(error.message);
            }
            console.error(error)
        }
    })

</script>